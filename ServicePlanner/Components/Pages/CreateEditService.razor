@page "/services/create"
@page "/services/edit/{ServiceId:int}"
@using ServicePlanner.Models
@using ServicePlanner.Services
@inject ServiceService ServiceService
@inject ServiceTemplateService TemplateService
@inject SongService SongService
@inject NavigationManager Navigation

<PageTitle>@(IsEdit ? "Edit Service" : "Create Service")</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>@(IsEdit ? "Edit Service" : "Create New Service")</h1>
                <button class="btn btn-secondary" @onclick="Cancel">
                    <i class="bi bi-arrow-left"></i> Back to Services
                </button>
            </div>

            <div class="card">
                <div class="card-body">
                    <EditForm Model="service" OnValidSubmit="SaveService">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label for="template" class="form-label">Template</label>
                                <select id="template" class="form-select" @bind="service.TemplateId" @bind:after="OnTemplateChanged" disabled="@IsEdit">
                                    <option value="0">Select a template...</option>
                                    @if (templates != null)
                                    {
                                        @foreach (var template in templates)
                                        {
                                            <option value="@template.Id">@template.Name</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label for="serviceDate" class="form-label">Service Date</label>
                                <InputDate id="serviceDate" class="form-control" @bind-Value="service.ServiceDate" @bind-Value:after="OnServiceDateChanged" />
                                <ValidationMessage For="@(() => service.ServiceDate)" />
                            </div>
                            <div class="col-md-4">
                                <label for="name" class="form-label">Service Name</label>
                                <InputText id="name" class="form-control" @bind-Value="service.Name" placeholder="e.g., Sunday Morning Service" />
                                <ValidationMessage For="@(() => service.Name)" />
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <div class="form-check">
                                    <InputCheckbox id="isSeasonal" class="form-check-input" @bind-Value="service.IsSeasonal" />
                                    <label class="form-check-label" for="isSeasonal">
                                        Seasonal Service
                                    </label>
                                </div>
                            </div>
                        </div>

                        @if (service.EventInstances.Any())
                        {
                            <div class="mb-4">
                                <h4>Service Events</h4>
                                <div class="table-responsive">
                                    <table class="table table-striped">
                                        <thead>
                                            <tr>
                                                <th>Order</th>
                                                <th>Type</th>
                                                <th>Title</th>
                                                <th>Details</th>
                                                <th>Notes</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var instance in service.EventInstances.OrderBy(e => e.ServiceEvent?.Order))
                                            {
                                                <tr>
                                                    <td>@instance.ServiceEvent?.Order</td>
                                                    <td>
                                                        <span class="badge bg-@GetEventTypeBadgeColor(instance.ServiceEvent?.Type)">
                                                            @instance.ServiceEvent?.Type
                                                        </span>
                                                    </td>
                                                    <td>@instance.ServiceEvent?.Title</td>
                                                    <td>
                                                        @if (instance.ServiceEvent?.Type == EventType.Speaker || 
                                                             instance.ServiceEvent?.Type == EventType.Prayer ||
                                                             instance.ServiceEvent?.Type == EventType.Communion ||
                                                             instance.ServiceEvent?.Type == EventType.Baptism)
                                                        {
                                                            <input type="text" class="form-control form-control-sm" 
                                                                   @bind="instance.PersonName" 
                                                                   placeholder="Person name" />
                                                        }
                                        else if (instance.ServiceEvent?.Type == EventType.Song)
                                        {
<select class="form-select form-select-sm" @bind="instance.SongTitle">
    <option value="">Select a song...</option>
@if (songs != null)
{
    var filteredSongs = songs
        .Where(s => 
            (service.IsSeasonal ? s.Seasonal : !s.Seasonal) && 
            !service.EventInstances.Any(ei => ei.SongTitle == s.SongName))
        .ToList();

    @foreach (var song in filteredSongs)
    {
        <option value="@song.SongName">
            @FormatSongOption(song)
        </option>
    }
}
</select>
                                        }
                                                    </td>
                                                    <td>
                                                        <input type="text" class="form-control form-control-sm" 
                                                               @bind="instance.Notes" 
                                                               placeholder="Additional notes" />
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        }

                        <div class="d-flex gap-2">
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-check-circle"></i> @(IsEdit ? "Update Service" : "Create Service")
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancel">
                                Cancel
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int? ServiceId { get; set; }
    [SupplyParameterFromQuery] public int? TemplateId { get; set; }

    private Service service = new Service();
    private List<ServiceTemplate>? templates;
    private List<Song>? songs;
    private Dictionary<string, DateTime?> lastPlayedDates = new Dictionary<string, DateTime?>();
    private bool IsEdit => ServiceId.HasValue;

    protected override async Task OnInitializedAsync()
    {
        templates = await TemplateService.GetActiveTemplatesAsync();
        songs = await SongService.GetAllSongsWithLastPlayedAsync();
        lastPlayedDates = await SongService.GetLastPlayedDatesAsync();

        if (IsEdit && ServiceId.HasValue)
        {
            var existingService = await ServiceService.GetServiceByIdAsync(ServiceId.Value);
            if (existingService != null)
            {
                service = existingService;
            }
            else
            {
                Navigation.NavigateTo("/services");
            }
        }
        else
        {
            service = new Service
            {
                Name = "",
                ServiceDate = DateTime.Today.AddDays(7), // Default to next week
                TemplateId = TemplateId ?? 0,
                EventInstances = new List<ServiceEventInstance>()
            };

            if (TemplateId.HasValue && TemplateId.Value > 0)
            {
                service.TemplateId = TemplateId.Value;
                await OnTemplateChanged();
            }
        }
    }

    private async Task OnTemplateChanged()
    {
        if (service.TemplateId > 0)
        {
            var template = await TemplateService.GetTemplateByIdAsync(service.TemplateId);
            if (template != null)
            {
                service.Template = template;
                
                // Auto-populate service name with template name + service date if name is empty
                if (string.IsNullOrWhiteSpace(service.Name))
                {
                    service.Name = $"{template.Name} - {service.ServiceDate:MMM dd, yyyy}";
                }
                
                service.EventInstances = template.Events.Select(evt => new ServiceEventInstance
                {
                    ServiceId = service.Id,
                    ServiceEventId = evt.Id,
                    ServiceEvent = evt,
                    PersonName = "",
                    SongTitle = "",
                    Notes = ""
                }).ToList();
            }
        }
        else
        {
            service.EventInstances.Clear();
        }
    }

    private void OnServiceDateChanged()
    {
        // Update service name when date changes if we have a template and the name follows the auto-generated pattern
        if (service.Template != null && !string.IsNullOrWhiteSpace(service.Template.Name))
        {
            // Check if the current name follows the pattern "Template Name - Date"
            var expectedPrefix = $"{service.Template.Name} - ";
            if (service.Name.StartsWith(expectedPrefix))
            {
                service.Name = $"{service.Template.Name} - {service.ServiceDate:MMM dd, yyyy}";
            }
        }
    }

    private string GetEventTypeBadgeColor(EventType? eventType)
    {
        return eventType switch
        {
            EventType.Speaker => "primary",
            EventType.Prayer => "success",
            EventType.Communion => "warning",
            EventType.Baptism => "info",
            EventType.Song => "secondary",
            _ => "light"
        };
    }

    private async Task SaveService()
    {
        if (string.IsNullOrWhiteSpace(service.Name) || service.TemplateId == 0)
        {
            return;
        }

        try
        {
            if (IsEdit)
            {
                await ServiceService.UpdateServiceAsync(service);
            }
            else
            {
                await ServiceService.CreateServiceAsync(service);
            }

            Navigation.NavigateTo("/services");
        }
        catch (Exception ex)
        {
            // In a real application, you would handle this error appropriately
            Console.WriteLine($"Error saving service: {ex.Message}");
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/services");
    }

    private string FormatSongOption(Song song)
    {
        var lastPlayed = lastPlayedDates.ContainsKey(song.SongName) 
            ? lastPlayedDates[song.SongName]?.ToString("MMM dd, yyyy") 
            : "Never";
        return $"{song.SongName} - {song.Artist} (Last played: {lastPlayed})";
    }

    private DateTime GetNextSunday()
    {
        DateTime today = DateTime.Today;
        int daysUntilSunday = ((int)DayOfWeek.Sunday - (int)today.DayOfWeek + 7) % 7;
        return today.AddDays(daysUntilSunday);
    }
}
