@page "/songs"
@using ServicePlanner.Models
@using ServicePlanner.Services
@inject SongService SongService
@inject NavigationManager Navigation

<PageTitle>Songs</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>Song Database</h1>
                <AuthorizeView>
                    <Authorized>
                        <button class="btn btn-primary" @onclick="CreateNewSong">
                            <i class="bi bi-plus-circle"></i> Add New Song
                        </button>
                    </Authorized>
                </AuthorizeView>
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Search songs..." 
                               @bind="searchTerm" @bind:after="SearchSongs" />
                        <button class="btn btn-outline-secondary" type="button" @onclick="SearchSongs" title="Search">
                            <i class="bi bi-search"></i> Search
                        </button>
                    </div>
                </div>
                <div class="col-md-3">
                    <select class="form-select" @bind="selectedCategory" @bind:after="FilterByCategory">
                        <option value="">All Categories</option>
                        @if (categories != null)
                        {
                            @foreach (var category in categories)
                            {
                                <option value="@category">@category</option>
                            }
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <button class="btn btn-outline-secondary w-100" @onclick="ClearFilters">
                        Clear Filters
                    </button>
                </div>
            </div>

            @if (songs == null)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (!songs.Any())
            {
                <div class="alert alert-info">
                    <h4>No Songs Found</h4>
                    <p>@(string.IsNullOrEmpty(searchTerm) ? "No songs in the database yet." : "No songs match your search criteria.")</p>
                </div>
            }
            else
            {
                <div class="card">
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th>
                                            <button class="btn btn-link p-0 text-decoration-none text-dark fw-bold" @onclick="() => SortBy(nameof(Song.SongName))">
                                                Song Name
                                                @if (sortColumn == nameof(Song.SongName))
                                                {
                                                    <i class="bi @(sortAscending ? "bi-arrow-up" : "bi-arrow-down")"></i>
                                                }
                                            </button>
                                        </th>
                                        <th>
                                            <button class="btn btn-link p-0 text-decoration-none text-dark fw-bold" @onclick="() => SortBy(nameof(Song.Artist))">
                                                Artist
                                                @if (sortColumn == nameof(Song.Artist))
                                                {
                                                    <i class="bi @(sortAscending ? "bi-arrow-up" : "bi-arrow-down")"></i>
                                                }
                                            </button>
                                        </th>
                                        <th>Key</th>
                                        <th>Category</th>
                                        <th>Speed</th>
                                        <th>Publisher</th>
                                        <th>
                                            <button class="btn btn-link p-0 text-decoration-none text-dark fw-bold" @onclick='() => SortBy("LastPlayed")'>
                                                Last Played
                                                @if (sortColumn == "LastPlayed")
                                                {
                                                    <i class="bi @(sortAscending ? "bi-arrow-up" : "bi-arrow-down")"></i>
                                                }
                                            </button>
                                        </th>
                                        <th>Seasonal</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var song in GetSortedSongs())
                                    {
                                        <tr>
                                            <td>
                                                <strong>@song.SongName</strong>
                                                @if (song.SongSelectId.HasValue && song.SongSelectId.Value > 0)
                                                {
                                                    <br><small class="text-muted">CCLI: <a href="https://songselect.ccli.com/songs/@song.SongSelectId" target="_blank" class="text-decoration-none">@song.SongSelectId</a></small>
                                                }
                                            </td>
                                            <td>@song.Artist</td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(song.Key))
                                                {
                                                    <span class="badge bg-info">@song.Key</span>
                                                }
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(song.Category))
                                                {
                                                    <span class="badge bg-secondary">@song.Category</span>
                                                }
                                            </td>
                                            <td>@song.Speed</td>
                                            <td>@song.Publisher</td>
                                            <td>
                                                @if (lastPlayedDates != null && lastPlayedDates.ContainsKey(song.SongName) && lastPlayedDates[song.SongName].HasValue)
                                                {
                                                    <small>@lastPlayedDates[song.SongName]!.Value.ToString("MM/dd/yyyy")</small>
                                                }
                                                else
                                                {
                                                    <small class="text-muted">Never</small>
                                                }
                                            </td>
                                            <td>
                                                @if (song.Seasonal)
                                                {
                                                    <span class="badge bg-warning text-dark">
                                                        <i class="bi bi-snow"></i> Seasonal
                                                    </span>
                                                }
                                            </td>
                                            <td>
                                                <AuthorizeView>
                                                    <Authorized>
                                                        <div class="btn-group btn-group-sm" role="group">
                                                            <button class="btn btn-outline-primary" @onclick="() => EditSong(song.Id)" title="Edit Song">
                                                                <i class="bi bi-pencil"></i> Edit
                                                            </button>
                                                            <button class="btn btn-outline-danger" @onclick="() => DeleteSong(song.Id)" title="Delete Song">
                                                                <i class="bi bi-trash"></i> Delete
                                                            </button>
                                                        </div>
                                                    </Authorized>
                                                    <NotAuthorized>
                                                        <span class="text-muted">-</span>
                                                    </NotAuthorized>
                                                </AuthorizeView>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <div class="mt-3">
                    <small class="text-muted">Total songs: @songs.Count</small>
                </div>
            }
        </div>
    </div>
</div>

<!-- Add/Edit Song Modal -->
@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(editingSong?.Id == 0 ? "Add New Song" : "Edit Song")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="editingSong" OnValidSubmit="SaveSong">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="songName" class="form-label">Song Name *</label>
                                    <InputText id="songName" class="form-control" @bind-Value="editingSong!.SongName" placeholder="Song name" />
                                    <ValidationMessage For="@(() => editingSong!.SongName)" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="artist" class="form-label">Artist</label>
                                    <InputText id="artist" class="form-control" @bind-Value="editingSong!.Artist" placeholder="Artist or composer" />
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label for="key" class="form-label">Key</label>
                                    <InputText id="key" class="form-control" @bind-Value="editingSong!.Key" placeholder="e.g., C, G, Am" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label for="speed" class="form-label">Speed</label>
                                    <InputText id="speed" class="form-control" @bind-Value="editingSong!.Speed" placeholder="e.g., Slow, Medium, Fast" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label for="category" class="form-label">Category</label>
                                    <InputText id="category" class="form-control" @bind-Value="editingSong!.Category" placeholder="e.g., Hymn, Contemporary" />
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="publisher" class="form-label">Publisher</label>
                                    <InputText id="publisher" class="form-control" @bind-Value="editingSong!.Publisher" placeholder="Publishing company" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="songSelectId" class="form-label">CCLI / SongSelect ID</label>
                                    <InputNumber id="songSelectId" class="form-control" @bind-Value="editingSong!.SongSelectId" placeholder="CCLI number" />
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3 form-check">
                                    <InputCheckbox id="seasonal" class="form-check-input" @bind-Value="editingSong!.Seasonal" />
                                    <label class="form-check-label" for="seasonal">
                                        Seasonal Song
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3 form-check">
                                    <InputCheckbox id="disabled" class="form-check-input" @bind-Value="editingSong!.Disabled" />
                                    <label class="form-check-label" for="disabled">
                                        Disabled
                                    </label>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="notes" class="form-label">Notes</label>
                            <InputTextArea id="notes" class="form-control" @bind-Value="editingSong!.Notes" placeholder="Additional notes about this song" rows="3" />
                        </div>

                        <div class="d-flex gap-2">
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-check-circle"></i> Save Song
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">
                                Cancel
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Song>? songs;
    private List<string>? categories;
    private Dictionary<string, DateTime?>? lastPlayedDates;
    private string searchTerm = "";
    private string selectedCategory = "";
    private bool showModal = false;
    private Song? editingSong;
    private string sortColumn = nameof(Song.SongName);
    private bool sortAscending = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadSongs();
        await LoadCategories();
        await LoadLastPlayedDates();
    }

    private async Task LoadSongs()
    {
        if (!string.IsNullOrEmpty(searchTerm))
        {
            songs = await SongService.SearchSongsAsync(searchTerm);
        }
        else if (!string.IsNullOrEmpty(selectedCategory))
        {
            songs = await SongService.GetSongsByCategoryAsync(selectedCategory);
        }
        else
        {
            songs = await SongService.GetAllSongsAsync();
        }
    }

    private async Task LoadCategories()
    {
        categories = await SongService.GetCategoriesAsync();
    }

    private async Task SearchSongs()
    {
        selectedCategory = "";
        await LoadSongs();
    }

    private async Task FilterByCategory()
    {
        searchTerm = "";
        await LoadSongs();
    }

    private async Task ClearFilters()
    {
        searchTerm = "";
        selectedCategory = "";
        sortColumn = nameof(Song.SongName);
        sortAscending = true;
        await LoadSongs();
    }

    private void CreateNewSong()
    {
        editingSong = new Song 
        { 
            SongName = "", 
            Artist = "", 
            Category = "", 
            Notes = "",
            Key = "",
            Speed = "",
            Publisher = "",
            SongSelectId = null,
            Seasonal = false,
            Disabled = false
        };
        showModal = true;
    }

    private async Task EditSong(int songId)
    {
        var song = await SongService.GetSongByIdAsync(songId);
        if (song != null)
        {
            editingSong = song;
            showModal = true;
        }
    }

    private async Task SaveSong()
    {
        if (editingSong == null || string.IsNullOrWhiteSpace(editingSong.SongName))
        {
            return;
        }

        try
        {
            if (editingSong.Id == 0)
            {
                await SongService.CreateSongAsync(editingSong);
            }
            else
            {
                await SongService.UpdateSongAsync(editingSong);
            }

            await LoadSongs();
            await LoadCategories();
            CloseModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving song: {ex.Message}");
        }
    }

    private async Task DeleteSong(int songId)
    {
        if (await ConfirmDelete())
        {
            await SongService.DeleteSongAsync(songId);
            await LoadSongs();
            await LoadCategories();
        }
    }

    private void CloseModal()
    {
        showModal = false;
        editingSong = null;
    }

    private Task<bool> ConfirmDelete()
    {
        // In a real application, you might use a modal dialog or JavaScript confirm
        return Task.FromResult(true);
    }

    private async Task LoadLastPlayedDates()
    {
        lastPlayedDates = await SongService.GetLastPlayedDatesAsync();
    }

    private void SortBy(string column)
    {
        if (sortColumn == column)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortColumn = column;
            sortAscending = true;
        }
    }

    private IEnumerable<Song> GetSortedSongs()
    {
        if (songs == null) return new List<Song>();

        IEnumerable<Song> sortedSongs = songs;

        switch (sortColumn)
        {
            case nameof(Song.SongName):
                sortedSongs = sortAscending 
                    ? songs.OrderBy(s => s.SongName) 
                    : songs.OrderByDescending(s => s.SongName);
                break;
            case nameof(Song.Artist):
                sortedSongs = sortAscending 
                    ? songs.OrderBy(s => s.Artist) 
                    : songs.OrderByDescending(s => s.Artist);
                break;
            case "LastPlayed":
                sortedSongs = sortAscending 
                    ? songs.OrderBy(s => lastPlayedDates != null && lastPlayedDates.ContainsKey(s.SongName) ? lastPlayedDates[s.SongName] : DateTime.MinValue)
                    : songs.OrderByDescending(s => lastPlayedDates != null && lastPlayedDates.ContainsKey(s.SongName) ? lastPlayedDates[s.SongName] : DateTime.MinValue);
                break;
            default:
                sortedSongs = songs.OrderBy(s => s.SongName);
                break;
        }

        return sortedSongs;
    }
}
