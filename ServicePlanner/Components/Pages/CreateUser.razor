@page "/admin/users/create"
@using Microsoft.AspNetCore.Authorization
@using ServicePlanner.Models
@using ServicePlanner.Services
@inject UserService UserService
@inject NavigationManager Navigation
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Create User - ServicePlanner</PageTitle>

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Create New User</h2>
                <button class="btn btn-secondary" @onclick="Cancel">
                    <i class="bi bi-arrow-left"></i> Back to Users
                </button>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    @errorMessage
                    <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
                </div>
            }

            <div class="card">
                <div class="card-body">
                    <EditForm Model="userModel" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger mb-3" />

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="firstName" class="form-label">First Name</label>
                                    <InputText @bind-Value="userModel.FirstName" class="form-control" id="firstName" />
                                    <ValidationMessage For="() => userModel.FirstName" class="text-danger" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="lastName" class="form-label">Last Name</label>
                                    <InputText @bind-Value="userModel.LastName" class="form-control" id="lastName" />
                                    <ValidationMessage For="() => userModel.LastName" class="text-danger" />
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="email" class="form-label">Email Address</label>
                            <InputText @bind-Value="userModel.Email" class="form-control" id="email" type="email" />
                            <ValidationMessage For="() => userModel.Email" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="role" class="form-label">Role</label>
                            <InputSelect @bind-Value="userModel.Role" class="form-select" id="role">
                                <option value="@UserRole.User">User</option>
                                <option value="@UserRole.Admin">Admin</option>
                            </InputSelect>
                            <ValidationMessage For="() => userModel.Role" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Temporary Password</label>
                            <InputText @bind-Value="userModel.Password" type="password" class="form-control" id="password" />
                            <ValidationMessage For="() => userModel.Password" class="text-danger" />
                            <div class="form-text">User will be required to change this password on first login.</div>
                        </div>

                        <div class="d-flex justify-content-end gap-2">
                            <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                Create User
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private UserModel userModel = new();
    private bool isLoading = false;
    private string errorMessage = string.Empty;

    private async Task HandleValidSubmit()
    {
        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            var user = new User
            {
                FirstName = userModel.FirstName,
                LastName = userModel.LastName,
                Email = userModel.Email,
                Role = userModel.Role,
                IsActive = true
            };

            var result = await UserService.CreateUserAsync(user, userModel.Password);
            if (result.Succeeded)
            {
                Navigation.NavigateTo("/admin/users");
            }
            else
            {
                errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while creating the user.";
            Console.WriteLine($"Create user error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/admin/users");
    }
}
