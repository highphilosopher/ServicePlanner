@page "/login"
@using Microsoft.AspNetCore.Identity
@using ServicePlanner.Models
@using ServicePlanner.Services
@inject UserService UserService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Login - ServicePlanner</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-4">
            <div class="card shadow">
                <div class="card-header text-center">
                    <h3>ServicePlanner Login</h3>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }

                    <EditForm Model="loginModel" OnValidSubmit="HandleLogin" FormName="LoginForm">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label for="email" class="form-label">Email Address</label>
                            <InputText @bind-Value="loginModel.Email" class="form-control" id="email" placeholder="Enter your email" />
                            <ValidationMessage For="() => loginModel.Email" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText @bind-Value="loginModel.Password" type="password" class="form-control" id="password" placeholder="Enter your password" />
                            <ValidationMessage For="() => loginModel.Password" class="text-danger" />
                        </div>

                        <div class="mb-3 form-check">
                            <InputCheckbox @bind-Value="loginModel.RememberMe" class="form-check-input" id="rememberMe" />
                            <label class="form-check-label" for="rememberMe">
                                Remember me
                            </label>
                        </div>

                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                }
                                Sign In
                            </button>
                        </div>
                    </EditForm>
                </div>
                <div class="card-footer text-center text-muted">
                    <small>Contact your administrator to create an account</small>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            var loginData = System.Text.Json.JsonSerializer.Serialize(new
            {
                Email = loginModel.Email,
                Password = loginModel.Password,
                RememberMe = loginModel.RememberMe
            });

            var responseJson = await JSRuntime.InvokeAsync<string>("loginUser", loginData);
            var result = System.Text.Json.JsonSerializer.Deserialize<LoginResponse>(responseJson, new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            if (result?.Success == true)
            {
                // Small delay to ensure the authentication cookie is set
                await Task.Delay(100);
                
                if (result.IsFirstLogin)
                {
                    Navigation.NavigateTo($"/change-password?firstLogin=true&returnUrl={Uri.EscapeDataString(ReturnUrl ?? "/")}", true);
                }
                else
                {
                    Navigation.NavigateTo(ReturnUrl ?? "/", true);
                }
                return;
            }
            else
            {
                errorMessage = result?.Error ?? "Login failed.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during login. Please try again.";
            Console.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public class LoginResponse
    {
        public bool Success { get; set; }
        public bool IsFirstLogin { get; set; }
        public string? Error { get; set; }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; } = false;
    }
}
