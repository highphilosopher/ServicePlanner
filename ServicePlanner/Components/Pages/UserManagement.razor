@page "/admin/users"
@using Microsoft.AspNetCore.Authorization
@using ServicePlanner.Models
@using ServicePlanner.Services
@using ServicePlanner.Components.Shared
@inject UserService UserService
@inject NavigationManager Navigation
@attribute [Authorize(Roles = "Admin")]

<PageTitle>User Management - ServicePlanner</PageTitle>

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mb-4 gap-2">
                <h2>User Management</h2>
                <button class="btn btn-primary" @onclick="ShowCreateUserModal">
                    <i class="bi bi-person-plus"></i> Create New User
                </button>
            </div>

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    @successMessage
                    <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
                </div>
            }

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    @errorMessage
                    <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
                </div>
            }

            <div class="card">
                <div class="card-body">
                    @if (users == null)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (!users.Any())
                    {
                        <div class="text-center text-muted">
                            <p>No users found.</p>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Name</th>
                                        <th>Email</th>
                                        <th>Role</th>
                                        <th>Status</th>
                                        <th>Created</th>
                                        <th>Last Login</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var user in users)
                                    {
                                        <tr>
                                            <td>@user.FullName</td>
                                            <td>@user.Email</td>
                                            <td>
                                                <span class="badge @(user.Role == UserRole.Admin ? "bg-danger" : "bg-primary")">
                                                    @user.Role
                                                </span>
                                            </td>
                                            <td>
                                                @if (user.IsActive)
                                                {
                                                    <span class="badge bg-success">Active</span>
                                                    @if (user.IsFirstLogin)
                                                    {
                                                        <span class="badge bg-warning text-dark ms-1">First Login</span>
                                                    }
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">Inactive</span>
                                                }
                                            </td>
                                            <td>@user.CreatedDate.ToString("MM/dd/yyyy")</td>
                                            <td>@(user.LastLoginDate?.ToString("MM/dd/yyyy") ?? "Never")</td>
                                            <td>
                                                <div class="btn-group btn-group-sm" role="group">
                                                    <button class="btn btn-outline-primary" @onclick="() => EditUser(user)" title="Edit User">
                                                        <i class="bi bi-pencil"></i>
                                                    </button>
                                                    <button class="btn btn-outline-warning" @onclick="() => ResetUserPassword(user)" title="Reset Password">
                                                        <i class="bi bi-key"></i>
                                                    </button>
                                                    @if (user.IsActive)
                                                    {
                                                        <button class="btn btn-outline-danger" @onclick="() => DeactivateUser(user)" title="Deactivate User">
                                                            <i class="bi bi-person-x"></i>
                                                        </button>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-secondary">Inactive</span>
                                                    }
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Blazor Modal Components -->
<UserModal IsVisible="showUserModal"
           IsEditMode="isEditMode"
           UserModel="userModel"
           IsProcessing="isLoading"
           ErrorMessage="modalErrorMessage"
           OnSave="SaveUser"
           OnCancel="CloseUserModal" />

<ConfirmationModal IsVisible="showResetPasswordModal"
                   Title="Reset Password"
                   Message="@resetPasswordMessage"
                   ConfirmButtonText="Reset Password"
                   ConfirmButtonClass="btn-warning"
                   IsProcessing="isProcessingReset"
                   OnConfirm="ConfirmResetPassword"
                   OnCancel="CancelResetPassword" />

<ConfirmationModal IsVisible="showDeactivateModal"
                   Title="Deactivate User"
                   Message="@deactivateMessage"
                   ConfirmButtonText="Deactivate"
                   ConfirmButtonClass="btn-danger"
                   IsProcessing="isProcessingDeactivate"
                   OnConfirm="ConfirmDeactivateUser"
                   OnCancel="CancelDeactivateUser" />

@code {
    private List<User>? users;
    private UserModel userModel = new();
    private bool isEditMode = false;
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private string modalErrorMessage = string.Empty;

    // Modal visibility states
    private bool showUserModal{get; set;} = false;
    private bool showResetPasswordModal = false;
    private bool showDeactivateModal = false;

    // Confirmation modal states
    private User? userToReset;
    private User? userToDeactivate;
    private string resetPasswordMessage = string.Empty;
    private string deactivateMessage = string.Empty;
    private bool isProcessingReset = false;
    private bool isProcessingDeactivate = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            users = await UserService.GetAllUsersAsync();
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load users.";
            Console.WriteLine($"Load users error: {ex.Message}");
        }
    }

    private void ShowCreateUserModal()
    {
        userModel = new UserModel();
        isEditMode = false;
        modalErrorMessage = string.Empty;
        showUserModal = true;
    }

    private void EditUser(User user)
    {
        userModel = new UserModel
        {
            Id = user.Id,
            FirstName = user.FirstName,
            LastName = user.LastName,
            Email = user.Email ?? string.Empty,
            Role = user.Role,
            IsActive = user.IsActive
        };
        isEditMode = true;
        modalErrorMessage = string.Empty;
        showUserModal = true;
    }

    private void CloseUserModal()
    {
        showUserModal = false;
        userModel = new UserModel();
        modalErrorMessage = string.Empty;
        isLoading = false;
    }

    private async Task SaveUser(UserModel model)
    {
        isLoading = true;
        modalErrorMessage = string.Empty;
        StateHasChanged();

        try
        {
            if (isEditMode)
            {
                var user = await UserService.GetUserByIdAsync(model.Id);
                if (user != null)
                {
                    user.FirstName = model.FirstName;
                    user.LastName = model.LastName;
                    user.Email = model.Email;
                    user.Role = model.Role;
                    user.IsActive = model.IsActive;

                    var result = await UserService.UpdateUserAsync(user);
                    if (result.Succeeded)
                    {
                        successMessage = "User updated successfully.";
                        CloseUserModal();
                        await LoadUsers();
                    }
                    else
                    {
                        modalErrorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
                    }
                }
            }
            else
            {
                var user = new User
                {
                    FirstName = model.FirstName,
                    LastName = model.LastName,
                    Email = model.Email,
                    Role = model.Role,
                    IsActive = true
                };

                var result = await UserService.CreateUserAsync(user, model.Password);
                if (result.Succeeded)
                {
                    successMessage = "User created successfully.";
                    CloseUserModal();
                    await LoadUsers();
                }
                else
                {
                    modalErrorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
                }
            }
        }
        catch (Exception ex)
        {
            modalErrorMessage = "An error occurred while saving the user.";
            Console.WriteLine($"Save user error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ResetUserPassword(User user)
    {
        userToReset = user;
        resetPasswordMessage = $"Reset password for {user.FullName}? They will need to change it on next login.";
        showResetPasswordModal = true;
    }

    private async Task ConfirmResetPassword()
    {
        if (userToReset == null) return;

        isProcessingReset = true;
        StateHasChanged();

        try
        {
            var tempPassword = "TempPassword123!";
            var result = await UserService.ResetPasswordAsync(userToReset, tempPassword);
            if (result.Succeeded)
            {
                userToReset.IsFirstLogin = true;
                await UserService.UpdateUserAsync(userToReset);
                successMessage = $"Password reset for {userToReset.FullName}. Temporary password: {tempPassword}";
                await LoadUsers();
            }
            else
            {
                errorMessage = "Failed to reset password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while resetting the password.";
            Console.WriteLine($"Reset password error: {ex.Message}");
        }
        finally
        {
            isProcessingReset = false;
            CancelResetPassword();
        }
    }

    private void CancelResetPassword()
    {
        showResetPasswordModal = false;
        userToReset = null;
        resetPasswordMessage = string.Empty;
        isProcessingReset = false;
    }

    private void DeactivateUser(User user)
    {
        userToDeactivate = user;
        deactivateMessage = $"Deactivate {user.FullName}? They will no longer be able to log in.";
        showDeactivateModal = true;
    }

    private async Task ConfirmDeactivateUser()
    {
        if (userToDeactivate == null) return;

        isProcessingDeactivate = true;
        StateHasChanged();

        try
        {
            var result = await UserService.DeactivateUserAsync(userToDeactivate.Id);
            if (result.Succeeded)
            {
                successMessage = $"{userToDeactivate.FullName} has been deactivated.";
                await LoadUsers();
            }
            else
            {
                errorMessage = "Failed to deactivate user.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while deactivating the user.";
            Console.WriteLine($"Deactivate user error: {ex.Message}");
        }
        finally
        {
            isProcessingDeactivate = false;
            CancelDeactivateUser();
        }
    }

    private void CancelDeactivateUser()
    {
        showDeactivateModal = false;
        userToDeactivate = null;
        deactivateMessage = string.Empty;
        isProcessingDeactivate = false;
    }
}
