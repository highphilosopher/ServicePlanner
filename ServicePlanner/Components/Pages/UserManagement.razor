@page "/admin/users"
@using Microsoft.AspNetCore.Authorization
@using ServicePlanner.Models
@using ServicePlanner.Services
@inject UserService UserService
@inject NavigationManager Navigation
@attribute [Authorize(Roles = "Admin")]

<PageTitle>User Management - ServicePlanner</PageTitle>

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mb-4 gap-2">
                <h2>User Management</h2>
                <button class="btn btn-primary" @onclick="CreateNewUser">
                    <i class="bi bi-person-plus"></i> Create New User
                </button>
            </div>

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    @successMessage
                    <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
                </div>
            }

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    @errorMessage
                    <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
                </div>
            }

            <div class="card">
                <div class="card-body">
                    @if (users == null)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (!users.Any())
                    {
                        <div class="text-center text-muted">
                            <p>No users found.</p>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Name</th>
                                        <th>Email</th>
                                        <th>Role</th>
                                        <th>Status</th>
                                        <th>Created</th>
                                        <th>Last Login</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var user in users)
                                    {
                                        <tr>
                                            <td>@user.FullName</td>
                                            <td>@user.Email</td>
                                            <td>
                                                <span class="badge @(user.Role == UserRole.Admin ? "bg-danger" : "bg-primary")">
                                                    @user.Role
                                                </span>
                                            </td>
                                            <td>
                                                @if (user.IsActive)
                                                {
                                                    <span class="badge bg-success">Active</span>
                                                    @if (user.IsFirstLogin)
                                                    {
                                                        <span class="badge bg-warning text-dark ms-1">First Login</span>
                                                    }
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">Inactive</span>
                                                }
                                            </td>
                                            <td>@user.CreatedDate.ToString("MM/dd/yyyy")</td>
                                            <td>@(user.LastLoginDate?.ToString("MM/dd/yyyy") ?? "Never")</td>
                                            <td>
                                                <div class="btn-group btn-group-sm" role="group">
                                                    <button class="btn btn-outline-primary" @onclick="() => EditUser(user.Id)" title="Edit User">
                                                        <i class="bi bi-pencil"></i>
                                                    </button>
                                                    <button class="btn btn-outline-warning" @onclick="() => ResetUserPassword(user)" title="Reset Password">
                                                        <i class="bi bi-key"></i>
                                                    </button>
                                                    @if (user.IsActive)
                                                    {
                                                        <button class="btn btn-outline-danger" @onclick="() => ToggleUserStatus(user)" title="Deactivate User" disabled="@(processingUserId == user.Id)">
                                                            @if (processingUserId == user.Id)
                                                            {
                                                                <span class="spinner-border spinner-border-sm" role="status"></span>
                                                            }
                                                            else
                                                            {
                                                                <i class="bi bi-person-x"></i>
                                                            }
                                                        </button>
                                                    }
                                                    else
                                                    {
                                                        <button class="btn btn-outline-success" @onclick="() => ToggleUserStatus(user)" title="Activate User" disabled="@(processingUserId == user.Id)">
                                                            @if (processingUserId == user.Id)
                                                            {
                                                                <span class="spinner-border spinner-border-sm" role="status"></span>
                                                            }
                                                            else
                                                            {
                                                                <i class="bi bi-person-check"></i>
                                                            }
                                                        </button>
                                                    }
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<User>? users;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private string? processingUserId = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Only reload users on first render or when explicitly needed
        // Removed automatic reload to prevent infinite loops
    }

    private async Task LoadUsers()
    {
        try
        {
            users = await UserService.GetAllUsersAsync();
            errorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load users.";
            Console.WriteLine($"Load users error: {ex.Message}");
        }
    }

    private void CreateNewUser()
    {
        Navigation.NavigateTo("/admin/users/create");
    }

    private void EditUser(string userId)
    {
        Navigation.NavigateTo($"/admin/users/edit/{userId}");
    }

    private async Task ToggleUserStatus(User user)
    {
        processingUserId = user.Id;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        StateHasChanged();

        try
        {
            Microsoft.AspNetCore.Identity.IdentityResult result;
            
            if (user.IsActive)
            {
                result = await UserService.DeactivateUserAsync(user.Id);
                if (result.Succeeded)
                {
                    successMessage = $"{user.FullName} has been deactivated.";
                }
            }
            else
            {
                // Reactivate user
                user.IsActive = true;
                result = await UserService.UpdateUserAsync(user);
                if (result.Succeeded)
                {
                    successMessage = $"{user.FullName} has been activated.";
                }
            }

            if (result.Succeeded)
            {
                await LoadUsers();
            }
            else
            {
                errorMessage = $"Failed to {(user.IsActive ? "deactivate" : "activate")} user.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while {(user.IsActive ? "deactivating" : "activating")} the user.";
            Console.WriteLine($"Toggle user status error: {ex.Message}");
        }
        finally
        {
            processingUserId = null;
            StateHasChanged();
        }
    }

    private async Task ResetUserPassword(User user)
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
        
        try
        {
            var tempPassword = "TempPassword123!";
            var result = await UserService.ResetPasswordAsync(user, tempPassword);
            if (result.Succeeded)
            {
                user.IsFirstLogin = true;
                var updateResult = await UserService.UpdateUserAsync(user);
                if (updateResult.Succeeded)
                {
                    successMessage = $"Password reset for {user.FullName}. Temporary password: {tempPassword}";
                    await LoadUsers();
                }
                else
                {
                    errorMessage = "Password was reset but failed to update user status.";
                }
            }
            else
            {
                errorMessage = "Failed to reset password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while resetting the password.";
            Console.WriteLine($"Reset password error: {ex.Message}");
        }
    }
}
