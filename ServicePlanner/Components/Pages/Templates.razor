@page "/templates"
@using ServicePlanner.Models
@using ServicePlanner.Services
@inject ServiceTemplateService TemplateService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Service Templates</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>Service Templates</h1>
                <AuthorizeView>
                    <Authorized>
                        <button class="btn btn-primary" @onclick="CreateNewTemplate">
                            <i class="bi bi-plus-circle"></i> Create New Template
                        </button>
                    </Authorized>
                </AuthorizeView>
            </div>

            @if (templates == null)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (!templates.Any())
            {
                <div class="alert alert-info">
                    <h4>No Templates Found</h4>
                    <p>You haven't created any service templates yet. Click "Create New Template" to get started.</p>
                </div>
            }
            else
            {
                <div class="row">
                    @foreach (var template in templates)
                    {
                        <div class="col-md-6 col-lg-4 mb-4">
                            <div class="card h-100">
                                <div class="card-body">
                                    <h5 class="card-title">@template.Name</h5>
                                    <p class="card-text">@template.Description</p>
                                    <p class="text-muted small">
                                        Created: @template.CreatedDate.ToString("MMM dd, yyyy")
                                    </p>
                                    <p class="text-muted small">
                                        Events: @template.Events.Count
                                    </p>
                                </div>
                                <div class="card-footer">
                                    <AuthorizeView>
                                        <Authorized>
                                            <div class="btn-group w-100" role="group">
                                                <button class="btn btn-outline-primary" @onclick="() => EditTemplate(template.Id)">
                                                    <i class="bi bi-pencil"></i> Edit
                                                </button>
                                                <button class="btn btn-outline-success" @onclick="() => CreateServiceFromTemplate(template.Id)">
                                                    <i class="bi bi-calendar-plus"></i> Use
                                                </button>
                                                <button class="btn btn-outline-danger" @onclick="() => DeleteTemplate(template.Id)">
                                                    <i class="bi bi-trash"></i> Delete
                                                </button>
                                            </div>
                                        </Authorized>
                                        <NotAuthorized>
                                            <div class="btn-group w-100" role="group">
                                                <button class="btn btn-outline-info w-100" @onclick="() => ViewTemplate(template.Id)">
                                                    <i class="bi bi-eye"></i> View
                                                </button>
                                            </div>
                                        </NotAuthorized>
                                    </AuthorizeView>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<ServiceTemplate>? templates;

    protected override async Task OnInitializedAsync()
    {
        await LoadTemplates();
    }

    private async Task LoadTemplates()
    {
        templates = await TemplateService.GetAllTemplatesAsync();
    }

    private void CreateNewTemplate()
    {
        Navigation.NavigateTo("/templates/create");
    }

    private void EditTemplate(int templateId)
    {
        Navigation.NavigateTo($"/templates/edit/{templateId}");
    }

    private void ViewTemplate(int templateId)
    {
        Navigation.NavigateTo($"/templates/view/{templateId}");
    }

    private void CreateServiceFromTemplate(int templateId)
    {
        Navigation.NavigateTo($"/services/create?templateId={templateId}");
    }

    private async Task DeleteTemplate(int templateId)
    {
        if (await ConfirmDelete())
        {
            await TemplateService.DeleteTemplateAsync(templateId);
            await LoadTemplates();
        }
    }

    private Task<bool> ConfirmDelete()
    {
        // In a real application, you might use a modal dialog or JavaScript confirm
        // For now, we'll just return true
        return Task.FromResult(true);
    }
}
