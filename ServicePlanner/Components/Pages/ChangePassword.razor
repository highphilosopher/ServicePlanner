@page "/change-password"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using ServicePlanner.Models
@using ServicePlanner.Services
@inject UserService UserService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<PageTitle>Change Password - ServicePlanner</PageTitle>

@if (IsFirstLogin)
{
    <!-- Minimal layout for first login -->
    <div class="page">
        <main>
            <div class="top-row px-4 d-flex justify-content-between align-items-center">
                <h5 class="mb-0 text-muted">ServicePlanner</h5>
                <small class="text-muted">Secure Setup Required</small>
            </div>

            <article class="content px-4">
                <div class="container mt-5">
                    <div class="row justify-content-center">
                        <div class="col-md-6 col-lg-5">
                            @RenderPasswordCard()
                        </div>
                    </div>
                </div>
            </article>
        </main>
    </div>

    <style>
        .page {
            position: relative;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }

        .top-row {
            background-color: #f7f7f7;
            border-bottom: 1px solid #d6d5d5;
            justify-content: flex-start;
            height: 3.5rem;
            display: flex;
            align-items: center;
        }

        .content {
            flex: 1;
            padding-top: 1.1rem;
        }
    </style>
}
else
{
    <!-- Normal layout for regular password change -->
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6 col-lg-5">
                @RenderPasswordCard()
            </div>
        </div>
    </div>
}

@code {
    private ChangePasswordModel changePasswordModel = new();
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isLoading = false;
    private User? currentUser;
    private EditForm? editForm;

    [SupplyParameterFromQuery]
    public bool FirstLogin { get; set; }

    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    private bool IsFirstLogin => FirstLogin;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            var email = authState.User.Identity.Name;
            if (!string.IsNullOrEmpty(email))
            {
                currentUser = await UserService.GetUserByEmailAsync(email);
            }
        }

        if (currentUser == null)
        {
            Navigation.NavigateTo("/login");
            return;
        }
    }

    private RenderFragment RenderPasswordCard() => __builder =>
    {
        <div class="card shadow">
            <div class="card-header text-center">
                <h3>@(IsFirstLogin ? "Set New Password" : "Change Password")</h3>
                @if (IsFirstLogin)
                {
                    <p class="text-muted mb-0">You must change your password before continuing</p>
                }
            </div>
            <div class="card-body">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                    </div>
                }

                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success" role="alert">
                        @successMessage
                    </div>
                }

                <EditForm Model="changePasswordModel" OnValidSubmit="HandleChangePassword" FormName="ChangePasswordForm" @ref="editForm">
                    <DataAnnotationsValidator />
                    
                    @if (!IsFirstLogin)
                    {
                        <div class="mb-3">
                            <label for="currentPassword" class="form-label">Current Password</label>
                            <InputText @bind-Value="changePasswordModel.CurrentPassword" type="password" class="form-control" id="currentPassword" placeholder="Enter current password" />
                            <ValidationMessage For="() => changePasswordModel.CurrentPassword" class="text-danger" />
                        </div>
                    }

                    <div class="mb-3">
                        <label for="newPassword" class="form-label">New Password</label>
                        <InputText @bind-Value="changePasswordModel.NewPassword" type="password" class="form-control" id="newPassword" placeholder="Enter new password" />
                        <ValidationMessage For="() => changePasswordModel.NewPassword" class="text-danger" />
                        <div class="form-text">
                            Password must be at least 8 characters and contain uppercase, lowercase, number, and special character.
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">Confirm New Password</label>
                        <InputText @bind-Value="changePasswordModel.ConfirmPassword" type="password" class="form-control" id="confirmPassword" placeholder="Confirm new password" />
                        <ValidationMessage For="() => changePasswordModel.ConfirmPassword" class="text-danger" />
                    </div>

                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            }
                            @(IsFirstLogin ? "Set Password" : "Change Password")
                        </button>
                    </div>
                </EditForm>

                @if (!IsFirstLogin)
                {
                    <div class="text-center mt-3">
                        <a href="/" class="btn btn-secondary">Cancel</a>
                    </div>
                }
            </div>
        </div>
    };

    private async Task HandleChangePassword()
    {
        if (currentUser == null) return;

        isLoading = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        StateHasChanged();

        try
        {
            IdentityResult result;

            if (IsFirstLogin)
            {
                // For first login, reset password without requiring current password
                result = await UserService.ResetPasswordAsync(currentUser, changePasswordModel.NewPassword);
                if (result.Succeeded)
                {
                    await UserService.SetFirstLoginCompleteAsync(currentUser);
                }
            }
            else
            {
                // Normal password change
                result = await UserService.ChangePasswordAsync(currentUser, changePasswordModel.CurrentPassword, changePasswordModel.NewPassword);
            }

            if (result.Succeeded)
            {
                successMessage = "Password changed successfully!";
                StateHasChanged();
                
                // Show success message briefly, then redirect
                await Task.Delay(2000);
                
                // Force navigation with forceLoad to ensure proper redirect
                if (IsFirstLogin)
                {
                    Navigation.NavigateTo(ReturnUrl ?? "/", forceLoad: true);
                }
                else
                {
                    Navigation.NavigateTo("/", forceLoad: true);
                }
            }
            else
            {
                // Show error message but don't clear the form
                errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while changing the password. Please try again.";
            Console.WriteLine($"Change password error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public class ChangePasswordModel
    {
        [Required(ErrorMessage = "Current password is required")]
        public string CurrentPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "New password is required")]
        [StringLength(100, ErrorMessage = "Password must be at least {2} characters long.", MinimumLength = 8)]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,}$", 
            ErrorMessage = "Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character.")]
        public string NewPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please confirm your password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
