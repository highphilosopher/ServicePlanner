@page "/change-password"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using ServicePlanner.Models
@using ServicePlanner.Services
@inject UserService UserService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<PageTitle>Change Password - ServicePlanner</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-5">
            @RenderPasswordCard()
        </div>
    </div>
</div>

@code {
    private ChangePasswordModel changePasswordModel = new();
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isLoading = false;
    private User? currentUser;
    private EditForm? editForm;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            var email = authState.User.Identity.Name;
            if (!string.IsNullOrEmpty(email))
            {
                currentUser = await UserService.GetUserByEmailAsync(email);
                if (currentUser != null)
                {
                    // Refresh authentication state
                    Console.WriteLine($"[ChangePassword] Refreshing authentication state for user: {currentUser.Email}");
                    await AuthenticationStateProvider.GetAuthenticationStateAsync();
                }
            }
        }

        if (currentUser == null)
        {
            Navigation.NavigateTo("/login");
            return;
        }
    }

    private RenderFragment RenderPasswordCard() => __builder =>
    {
        <div class="card shadow">
            <div class="card-header text-center">
                <h3>Change Password</h3>
            </div>
            <div class="card-body">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                    </div>
                }

                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success" role="alert">
                        @successMessage
                    </div>
                }

                <EditForm Model="changePasswordModel" OnValidSubmit="HandleChangePassword" FormName="ChangePasswordForm" @ref="editForm">
                    <DataAnnotationsValidator />
                    
                    <div class="mb-3">
                        <label for="currentPassword" class="form-label">Current Password</label>
                        <InputText @bind-Value="changePasswordModel.CurrentPassword" type="password" class="form-control" id="currentPassword" placeholder="Enter current password" />
                        <ValidationMessage For="() => changePasswordModel.CurrentPassword" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="newPassword" class="form-label">New Password</label>
                        <InputText @bind-Value="changePasswordModel.NewPassword" type="password" class="form-control" id="newPassword" placeholder="Enter new password" />
                        <ValidationMessage For="() => changePasswordModel.NewPassword" class="text-danger" />
                        <div class="form-text">
                            Password must be at least 8 characters and contain uppercase, lowercase, number, and special character.
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">Confirm New Password</label>
                        <InputText @bind-Value="changePasswordModel.ConfirmPassword" type="password" class="form-control" id="confirmPassword" placeholder="Confirm new password" />
                        <ValidationMessage For="() => changePasswordModel.ConfirmPassword" class="text-danger" />
                    </div>

                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            }
                            Change Password
                        </button>
                    </div>
                </EditForm>

                <div class="text-center mt-3">
                    <a href="/" class="btn btn-secondary">Cancel</a>
                </div>
            </div>
        </div>
    };

    private async Task HandleChangePassword()
    {
        if (currentUser == null) return;

        isLoading = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        StateHasChanged();

        try
        {
            // Normal password change
            var result = await UserService.ChangePasswordAsync(currentUser, changePasswordModel.CurrentPassword, changePasswordModel.NewPassword);
            if (result.Succeeded)
            {
                successMessage = "Password changed successfully!";
                StateHasChanged();
                
                // Force navigation to home page
                Navigation.NavigateTo("/", forceLoad: true);
            }
            else
            {
                errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while changing the password. Please try again.";
            Console.WriteLine($"Change password error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public class ChangePasswordModel
    {
        [Required(ErrorMessage = "Current password is required")]
        public string CurrentPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "New password is required")]
        [StringLength(100, ErrorMessage = "Password must be at least {2} characters long.", MinimumLength = 8)]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,}$", 
            ErrorMessage = "Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character.")]
        public string NewPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please confirm your password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
