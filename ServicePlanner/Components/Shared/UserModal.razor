@using Microsoft.AspNetCore.Components.Forms
@using ServicePlanner.Models

<div class="modal fade @(IsVisible ? "show" : "")" style="display: @(IsVisible ? "block" : "none")" tabindex="-1" aria-hidden="@(!IsVisible)">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(IsEditMode ? "Edit User" : "Create New User")</h5>
                <button type="button" class="btn-close" @onclick="Cancel" aria-label="Close"></button>
            </div>
            <EditForm Model="UserModel" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="firstName" class="form-label">First Name</label>
                        <InputText @bind-Value="UserModel.FirstName" class="form-control" id="firstName" />
                        <ValidationMessage For="() => UserModel.FirstName" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="lastName" class="form-label">Last Name</label>
                        <InputText @bind-Value="UserModel.LastName" class="form-control" id="lastName" />
                        <ValidationMessage For="() => UserModel.LastName" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="email" class="form-label">Email Address</label>
                        <InputText @bind-Value="UserModel.Email" class="form-control" id="email" />
                        <ValidationMessage For="() => UserModel.Email" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="role" class="form-label">Role</label>
                        <InputSelect @bind-Value="UserModel.Role" class="form-select" id="role">
                            <option value="@UserRole.User">User</option>
                            <option value="@UserRole.Admin">Admin</option>
                        </InputSelect>
                        <ValidationMessage For="() => UserModel.Role" class="text-danger" />
                    </div>

                    @if (!IsEditMode)
                    {
                        <div class="mb-3">
                            <label for="password" class="form-label">Temporary Password</label>
                            <InputText @bind-Value="UserModel.Password" type="password" class="form-control" id="password" />
                            <ValidationMessage For="() => UserModel.Password" class="text-danger" />
                            <div class="form-text">User will be required to change this password on first login.</div>
                        </div>
                    }

                    @if (IsEditMode)
                    {
                        <div class="mb-3 form-check">
                            <InputCheckbox @bind-Value="UserModel.IsActive" class="form-check-input" id="isActive" />
                            <label class="form-check-label" for="isActive">
                                Active
                            </label>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @ErrorMessage
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                    <button type="submit" class="btn btn-primary" disabled="@IsProcessing">
                        @if (IsProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        @(IsEditMode ? "Update User" : "Create User")
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public bool IsEditMode { get; set; }
    [Parameter] public UserModel UserModel { get; set; } = new();
    [Parameter] public bool IsProcessing { get; set; }
    [Parameter] public string ErrorMessage { get; set; } = string.Empty;
    [Parameter] public EventCallback<UserModel> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private async Task HandleValidSubmit()
    {
        await OnSave.InvokeAsync(UserModel);
    }

    private async Task Cancel()
    {
        await OnCancel.InvokeAsync();
    }

}
